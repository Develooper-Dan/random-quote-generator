{"version":3,"sources":["components/Quote.js","components/Social.js","components/App.js","index.js"],"names":["Quote","props","Fragment","id","className","quote","author","Social","twitterUrl","href","target","rel","data-href","data-layout","data-size","App","handleRequest","fetch","then","response","json","quotes","setState","getRandomQuote","catch","error","console","randomIndex","Math","floor","random","state","length","randomQuote","changeColor","rgb","i","document","getElementById","style","backgroundColor","bind","this","onClick","Component","ReactDOM","render"],"mappings":"sQAgBiBA,EAdH,SAACC,GACb,OACA,eAAC,IAAMC,SAAP,WACC,oBAAGC,GAAG,OAAN,UACE,mBAAGC,UAAU,mBAAb,eACAH,EAAMI,MAAMA,MACZ,mBAAGD,UAAU,oBAAb,kBAEF,mBAAGD,GAAG,SAAN,SACE,KAAKF,EAAMI,MAAMC,aCILC,EAbF,SAACN,GACd,IAAMO,EAAW,yCAAD,OAA2CP,EAAMI,MAAMA,MAAvD,eAAmEJ,EAAMI,MAAMC,QAC/F,OACA,sBAAKH,GAAG,SAAR,UACE,oBAAGM,KAAMD,EAAYE,OAAO,SAASC,IAAI,aAAaR,GAAG,cAAzD,cAAwE,mBAAGC,UAAU,qBAErF,qBAAKA,UAAU,kBAAkBQ,YAAU,2DAA2DC,cAAY,SAASC,YAAU,QAArI,SACE,mBAAGJ,OAAO,SAASC,IAAI,aAAaF,KAAK,kIAAsIL,UAAU,wBAAzL,yBC2DSW,E,kDA9Db,aAAe,IAAD,8BACZ,gBASFC,cAAe,WACbC,MAAM,+IACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAACD,WACf,EAAKE,oBAENC,OAAM,SAAAC,GACHC,QAAQD,MAAM,kCAAmCA,OAlBzC,EAsBdF,eAAiB,WACf,IAAMI,EAAcC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMV,OAAOW,QACjE,EAAKV,SAAS,CACZW,YAAa,EAAKF,MAAMV,OAAOM,MAzBrB,EA6BhBO,YAAa,WAEV,IADA,IAAIC,EAAK,OACAC,EAAE,EAAGA,GAAG,EAAGA,IAClBD,GAAOP,KAAKC,MAAsB,IAAhBD,KAAKE,UACnBM,EAAE,IACLD,GAAO,MAEKE,SAASC,eAAe,QAAQC,MAAMC,gBAAkBL,EAAI,KAlC1E,EAAKJ,MAAQ,CACZV,OAAO,GACPY,YAAY,IAEb,EAAKjB,cAAgB,EAAKA,cAAcyB,KAAnB,gBACjB,EAAKlB,eAAiB,EAAKA,eAAekB,KAApB,gBAPd,E,gEAwCdC,KAAK1B,kB,+BAGI,IAAD,OACN,OACE,sBAAKb,GAAG,YAAR,UACE,cAAC,EAAD,CAAOE,MAAOqC,KAAKX,MAAME,cACzB,sBAAK9B,GAAG,eAAR,UACE,cAAC,EAAD,CAAQE,MAAOqC,KAAKX,MAAME,cAC1B,wBAAQU,QAAW,WACf,EAAKpB,iBACL,EAAKW,eAEP/B,GAAG,YAJL,iC,GAlDQyC,a,YCElBC,IAASC,OAAO,cAAC,EAAD,IAAST,SAASC,eAAe,W","file":"static/js/main.8b923699.chunk.js","sourcesContent":["import React from 'react';\r\n//gets a random quote object as props and displays it\r\nconst Quote = (props) => {\r\n  return(\r\n  <React.Fragment>\r\n   <p id='text'>\r\n     <i className=\"fa fa-quote-left\"> </i>\r\n    {props.quote.quote}\r\n     <i className=\"fa fa-quote-right\"> </i>\r\n   </p>\r\n   <p id=\"author\">\r\n    {\"- \"+props.quote.author}\r\n   </p>\r\n  </React.Fragment>\r\n  )}\r\n\r\n  export default Quote;\r\n","import React from 'react';\r\n//contains all icons for posting quotes to social media \r\nconst Social = (props) => {\r\n  const twitterUrl= `https://twitter.com/intent/tweet?text=${props.quote.quote}%20-${props.quote.author}`\r\n  return(\r\n  <div id=\"social\">\r\n    <a href={twitterUrl} target=\"_blank\" rel=\"noreferrer\" id=\"tweet-quote\"> <i className=\"fa fa-twitter\"></i>\r\n    </a>\r\n    <div className=\"fb-share-button\" data-href=\"https://develooper-dan.github.io/random-quote-generator/\" data-layout=\"button\" data-size=\"large\">\r\n      <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdevelooper-dan.github.io%2Frandom-quote-generator%2F&amp;src=sdkpreparse\" className=\"fb-xfbml-parse-ignore\">Share\r\n      </a>\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n  export default Social;\r\n","import React, { Component } from 'react';\r\nimport Quote from \"./Quote\";\r\nimport Social from \"./Social\";\r\n\r\n//main component\r\nclass App extends Component{\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n     quotes:[],\r\n     randomQuote:{}\r\n    }\r\n    this.handleRequest = this.handleRequest.bind(this)\r\n        this.getRandomQuote = this.getRandomQuote.bind(this)\r\n  }\r\n//fetches the quotes data stored on my github-account and puts it into this components state as an array. Also calls getRandomQuote to set an initial quote for display\r\n  handleRequest =() => {\r\n    fetch('https://gist.githubusercontent.com/Develooper-Dan/af1d39b1939c74cb27b38c496131bb44/raw/5424fa6bb779644080656727dbce6fbaaa3b3d13/quotes.json')\r\n    .then(response => response.json())\r\n    .then(quotes => {\r\n      this.setState({quotes});\r\n      this.getRandomQuote();\r\n    })\r\n    .catch(error => {\r\n        console.error('Error fetching and parsing data', error);\r\n    })\r\n  }\r\n//stores one randomly picked quote from the quotes[] in the randomQuote-state which is passed to the Quote- and Social-component\r\n  getRandomQuote = ()=>{\r\n    const randomIndex = Math.floor(Math.random() * this.state.quotes.length);\r\n    this.setState({\r\n      randomQuote: this.state.quotes[randomIndex]\r\n      })\r\n  }\r\n//randomly changing bg-color whenever a new quote is displayed\r\nchangeColor =() =>{\r\n   let rgb =\"rgb(\";\r\n   for (let i=1; i<=3; i++){\r\n     rgb += Math.floor(Math.random() * 256);\r\n     if (i<3){\r\n      rgb += ', '\r\n     }\r\n    }             document.getElementById(\"root\").style.backgroundColor = rgb+')';\r\n  }\r\n\r\ncomponentDidMount(){\r\n  this.handleRequest()\r\n}\r\n\r\n  render(){\r\n    return(\r\n      <div id='quote-box'>\r\n        <Quote quote={this.state.randomQuote}/>\r\n        <div id='quote-footer'>\r\n          <Social quote={this.state.randomQuote}/>\r\n          <button onClick = {() =>{\r\n              this.getRandomQuote();\r\n              this.changeColor()\r\n              }}\r\n            id='new-quote'>\r\n              New Quote\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","//main entry point into the app\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App.js';\r\nimport './css/normalize.css';\r\nimport './css/styles.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}